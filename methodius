#!/usr/bin/bash

export PATH=~/.npm-global/bin:$PATH

Bootstrap(){

    echo -e "\n\tInstalling templates"
    mkdir -p ~/.local/share/pandoc/templates
    cp $PWD/templates/* ~/.local/share/pandoc/templates

    echo -e "\n\tInstalling tectonic"
    sudo xbps-install tectonic || { echo -e "\n\tfailed to install tectonic" \
    && return 1; }

    echo -e "\n\tInstalling npm as build dependency for pandoc-url2cite"
    sudo xbps-install nodejs \
    || { echo -e "\n \tfailed to install pandoc-url2cite" \
    && return 1; }

    echo -e "\n\tInstalling librsvg-utils for mermaid-filter"
    sudo xbps-install librsvg-utils \
    || { echo -e "\n \tfailed to install librsvg-utils" \
    && return 1; }

    echo -e "\n\tInstalling pandoc-url2cite"
    sudo npm install -g pandoc-url2cite \
    || { echo -e "\n \tfailed to install pandoc-url2cite" \
    && return 1; }

    echo -e "\n\tInstalling mermaid-filter"
    sudo npm install -g mermaid-filter \
    || { echo -e "\n \tfailed to install mermaid-filter" \
    && return 1; }

    echo -e "\n\tInstalling tectonic"
    sudo xbps-install tectonic \
    || { echo -e "\n \tfailed to install tectonic" \
    && return 1; }

return 0
}

Help(){
    echo -e "\n\tThis tool allows you to easily compile markdown documents into pdf text\
    \n\n\tUsage: [file] -option(s) \
    \n\tIf only a file is specified the default CSL and template will be used \
    \n\n\tOptions: \n\t-h: print this help and exit \
    \n\t-c: path to csl file \
    \n\t-t: path to latex template \
    \n\t-nf: do not apply citation filters \
    \n\t-no: do not open the pdf after conversion \
    \n\t-b: bootstrap this helper \
    \n\t-m: enable mermaid figures"
}

Getcitation(){
while read line ; do
url=${line#*canlii.org}
key=""
db=$(cut -d '/' -f4 <<< $url )
jur=$(cut -d '/' -f3 <<< $url )
ident=$(cut -d '/' -f7<<< $url )
dbid=$(awk '$0~i{print $2}' i="$db " $HOME/.local/share/methodius/equ/master)

cacheresponse=$(grep -m1 "$url" $HOME/.local/share/methodius/canliicache | cut -d '|' -f2)
if [ -n "${cacheresponse}" ] ; then
	echo "$cacheresponse"
	exit 0
fi

requesturl="https://api.canlii.org/v1/caseBrowse/en/$dbid/$ident/?api_key=$key"
response=$(wget -qO- "$requesturl")
if [ -z "${response}" ] ; then
	echo "failed to connect to canlii with url $requesturl, exiting"
	exit 1
fi

soc=$(awk -F '"' '/title":/ {print $4}' <<< "$response")
citekeyresponse=$(awk -F '"' '/citation":/ {print $4}' <<< "$response")
citekey=${citekeyresponse%\ \(CanLII)*}

if [ -n "${soc}" ] && [ -n "${citekey}" ] ; then
	citation="*$soc,* $citekey"
	echo "$citation"
	echo "$url|$citation" >> $HOME/.local/share/methodius/canliicache
else
	echo -e "failed to find database for canlii response\nresponse:\t$response\ndb:\t$db\ndbid:\t$dbib\njurisdiction:$jur\nidentity:\t$ident"
	exit 1
fi
done
}

Findlinks(){
	declare -A CITATIONS
	grep -o '(.*\.canlii.org.*\.html.*)' | while read line ; do
	chunk=""
	link=""
	pinpoint=""
		if [ -z "${CITATIONS["$line"]}" ] ; then
		chunk="${line:1:${#line}-2}"
		pinpoint=$(awk '$1=""; {print $0}' <<< "$chunk")
		link=$(awk '{print $1}' <<< "$chunk")
		citation=$(Getcitation <<< "$link")
		CITATIONS["$line"]="^[$citation$pinpoint]"
		fi
		sed -i "s|$line|${CITATIONS[$line]}|g" $copy
	done
}

Legalcite(){
output="$PWD/${base%%.*}.pdf"
CSL="$HOME/.local/share/pandoc/templates/mcgill-en.csl"
filename=$(basename "$file")
mkdir -p /tmp/methodius/
copy="/tmp/methodius/$base"
cp "$file" /tmp/methodius/

echo "copy is $copy"
Findlinks < "$copy"
input="$copy"
}

SetTemplate(){
    if [[ -z $template ]] ; then
        template="methodius"
    fi
    if [[ -z $CSL ]] ; then
        CSL="$HOME/.local/share/pandoc/templates/chicago_note.csl"
    fi
    if [[ $nofilters ]] ; then
    filters=""
    else
    filters="--filter=pandoc-url2cite --citeproc"
    fi
    if [[ -v $open_after ]] ; then
    open_after=true
    fi
    if [[ -v $devour ]] ; then
    devour=true
    fi
    if $legal ; then
	Legalcite
    fi
    if [[ -z $input ]] ; then
	    input="$file"
    fi

}

Convertpdf(){
    pandoc \
    $filters \
    $mermaid \
    --csl $CSL \
    --pdf-engine=tectonic \
    --template $template \
    -s $input \
    -o $output \
    && return 0 || return 1
}

Post_open() {
    if $open_after ; then
        if $devour ; then
            devour zathura $output || exo-open $output
        else
            zathura $output || exo-open $output
        fi
    fi
}

Cleanmermaid(){
if $cleanMermaid ; then
    rm mermaid-filter.err
    rm -rf mermaid-images/
fi
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -b|--bootstrap)
    EXTENSION="$2"
    Bootstrap && exit 0 || exit 1
    ;;
    -t|--template)
    template="$2"
    shift
    shift
    ;;
    -c|--csl)
    CSL="$2"
    shift 
    shift
    ;;
    -h|--help)
    Help && exit 0
    ;;
    -nf|--filters)
    nofilters=true
    shift
    ;;
    -no|--no-open)
    open_after=false
    shift
    ;;
    -nd|--no-devour)
    devour=false
    shift
    ;;
    -m|--mermaid)
    mermaid="--filter=mermaid-filter"
    mkdir mermaid-images
    cleanMermaid=true
    shift
    ;;
    -l|--legal)
    legal=true
    shift
    ;;
    *)
    POSITIONAL+=("$1")
    shift
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

file=$1
base=$(basename $1)
output="${base%%.*}.pdf"

SetTemplate
echo -e "\t[INPUT VARIABLES]\n\tinput: $input \n\ttemplate: $template \n\tCSL: $CSL \n\toutput: $output\n"
Convertpdf && Cleanmermaid && Post_open
